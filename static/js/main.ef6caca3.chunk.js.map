{"version":3,"sources":["components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Board","flag","clickable","useState","BoardArray","setBoardArray","BoardColumns","setBoardColumns","BoardRows","setBoardRows","Player","setPlayer","click","setClick","useEffect","columns","window","innerWidth","rows","innerHeight","a","Array","fill","b","map","i","blockClickHandler","x","y","setTimeout","changeUser","splitHandler","incrementHandler","items","item","reds","greens","row","block","document","getElementById","style","filter","div","createElement","width","position","top","innerHTML","appendChild","onclick","location","reload","checkWinningStats","setToZeroHandler","className","id","rowindex","key","height","col","colindex","Fragment","border","onClick","backgroundColor","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ef6caca3.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport './Board.css'\r\n\r\nconst Board = () => {\r\n\r\n    let flag = 0\r\n    let clickable = true\r\n\r\n    const [ BoardArray, setBoardArray ] = useState([])\r\n    const [ BoardColumns, setBoardColumns ] = useState('')\r\n    const [ BoardRows, setBoardRows ] = useState('')\r\n    const [ Player, setPlayer ] = useState('red')\r\n    const [ click, setClick ] = useState(true)\r\n\r\n    useEffect(() => {\r\n        let columns = ~~(window.innerWidth/50)\r\n        setBoardColumns(columns)\r\n        let rows = ~~((window.innerHeight)/50)\r\n        setBoardRows(rows)\r\n        let a = new Array(rows).fill(0)\r\n        let b = a.map(i => a[i] = new Array(columns).fill([0,null]))\r\n        setBoardArray(b)\r\n    },[])\r\n\r\n    const blockClickHandler = (x,y,Player) => {\r\n        if(clickable){\r\n        flag+=1\r\n        setTimeout(() => {\r\n            if(Player)\r\n            changeUser()\r\n            if((x === 0 && y === 0) || (x === 0 && y === BoardColumns-1) || (y === 0 && x === BoardRows-1) || (x === BoardRows-1 && y === BoardColumns-1)){\r\n                return BoardArray[x][y][0] === 1 ? splitHandler(x,y,'corner') : incrementHandler(x,y)\r\n            }else if(x === 0 || y === 0 || x === BoardRows-1 || y === BoardColumns-1){\r\n                return BoardArray[x][y][0] === 2 ? splitHandler(x,y,'side') : incrementHandler(x,y)\r\n            }else{  \r\n                return BoardArray[x][y][0] === 3 ? splitHandler(x,y,'center') : incrementHandler(x,y)\r\n            }\r\n        }, 150);\r\n        }\r\n    }\r\n\r\n    const checkWinningStats = () => {\r\n        if(flag >= 3){\r\n        let reds = null\r\n        let greens = null\r\n        BoardArray.map(row => {\r\n            return row.map(block => block[1] !== null ? block[1] === 'red' ? reds+=1 : block[1] === 'green' ? greens+=1 : null : null)\r\n        })\r\n        if(reds === null){\r\n            setClick(!click)\r\n            document.getElementById('container').style.filter = 'opacity(0.7)'\r\n            clickable = false\r\n            let div = document.createElement('div')\r\n            div.style.width = '75%'\r\n            div.style.position = 'absolute'\r\n            div.style.top = '100px'\r\n            div.innerHTML = `<center>Player Green Won<br /><span>Tap to play again</center>`\r\n            document.getElementById('container').appendChild(div)\r\n            document.getElementById('container').onclick = () => window.location.reload()\r\n        }\r\n        if(greens === null){\r\n            setClick(!click)\r\n            document.getElementById('container').style.filter = 'opacity(0.7)'\r\n            clickable = false\r\n            let div = document.createElement('div')\r\n            div.style.width = '75%'\r\n            div.style.position = 'absolute'\r\n            div.style.top = '100px'\r\n            div.innerHTML = `<center>Player Red Won<br /><span>Tap to play again</center>`\r\n            document.getElementById('container').appendChild(div)\r\n            document.getElementById('container').onclick = () => window.location.reload()\r\n        }\r\n        }\r\n    }\r\n\r\n    const changeUser = () => {\r\n        Player === 'red' ? setPlayer('green') : setPlayer('red')\r\n    }\r\n\r\n    const incrementHandler = (x,y) => {\r\n        let items = [...BoardArray]\r\n        let item = [...items[x][y]]\r\n        item[0] += 1\r\n        item[1] = Player\r\n        items[x][y] = item\r\n        setBoardArray(items)\r\n        checkWinningStats()\r\n    }\r\n\r\n    const setToZeroHandler = (x,y) => {\r\n        BoardArray[x][y][0] = 0\r\n        BoardArray[x][y][1] = null\r\n        setBoardArray([...BoardArray])\r\n    }\r\n\r\n    const splitHandler = (x,y,position) => {\r\n        switch (position) {\r\n            case 'corner':\r\n                return x === 0 && y === 0 ? \r\n                        \r\n                        (setToZeroHandler(x,y),  blockClickHandler(x,y+1), blockClickHandler(x+1,y)) : \r\n                        \r\n                        x === 0 && y === BoardColumns-1 ? \r\n\r\n                        (setToZeroHandler(x,y),  blockClickHandler(x,y-1), blockClickHandler(x+1,y)) : \r\n\r\n                        y === 0 && x === BoardRows-1 ? \r\n\r\n                        (setToZeroHandler(x,y),  blockClickHandler(x-1,y), blockClickHandler(x,y+1)) :\r\n\r\n                        x === BoardRows-1 && y === BoardColumns-1 ? \r\n\r\n                        (setToZeroHandler(x,y),  blockClickHandler(x-1,y), blockClickHandler(x,y-1)) :\r\n\r\n                        null\r\n\r\n            case 'side':\r\n                return x === 0 ? \r\n\r\n                        (setToZeroHandler(x,y), blockClickHandler(x,y-1), blockClickHandler(x,y+1), blockClickHandler(x+1,y)) :\r\n\r\n                        y === 0 ?\r\n\r\n                        (setToZeroHandler(x,y), blockClickHandler(x+1,y), blockClickHandler(x-1,y), blockClickHandler(x,y+1)) :\r\n\r\n                        x === BoardRows-1 ? \r\n\r\n                        (setToZeroHandler(x,y), blockClickHandler(x,y+1), blockClickHandler(x,y-1), blockClickHandler(x-1,y)) :\r\n                        \r\n                        y === BoardColumns-1 ? \r\n\r\n                        (setToZeroHandler(x,y), blockClickHandler(x+1,y), blockClickHandler(x-1,y), blockClickHandler(x,y-1)) :\r\n\r\n                        null\r\n\r\n            case 'center':\r\n                return (setToZeroHandler(x,y), blockClickHandler(x,y+1), blockClickHandler(x+1,y), blockClickHandler(x,y-1), blockClickHandler(x-1,y))\r\n\r\n            default:\r\n            break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='container' id='container'>\r\n            <div className='centerDiv'>\r\n            {\r\n                BoardArray.map((row,rowindex) => {\r\n                    return <div key={rowindex} style={{height:'50px'}}>\r\n                    {row.map((col,colindex) => {\r\n                        return <React.Fragment key={rowindex+colindex}>\r\n                            <div className='block'\r\n                                style={{border:`1px solid ${Player}`}}\r\n                                onClick={(click && (BoardArray[rowindex][colindex][1] === Player || BoardArray[rowindex][colindex][1] === null)) ? () => blockClickHandler(rowindex,colindex,Player) : null}\r\n                                >\r\n                                <div className={BoardArray[rowindex][colindex][0] === 1 ? \r\n                                                    'one common' : \r\n                                                BoardArray[rowindex][colindex][0] === 2 ? \r\n                                                    'two common' : BoardArray[rowindex][colindex][0] === 3 ?\r\n                                                    'three common' : 'empty'}\r\n                                        style={{backgroundColor:BoardArray[rowindex][colindex][1]}}\r\n                                    >\r\n\r\n                                </div>\r\n                            </div>\r\n                        </React.Fragment>\r\n                    \r\n                    })}\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board\r\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}